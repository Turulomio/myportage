Index: navit/gui/gtk/CMakeLists.txt
===================================================================
--- navit/gui/gtk/CMakeLists.txt	(revision 5904)
+++ navit/gui/gtk/CMakeLists.txt	(working copy)
@@ -1,2 +1,2 @@
-module_add_library(gui_gtk datawindow.c destination.c gui_gtk_statusbar.c gui_gtk_action.c gui_gtk_window.c gui_gtk_poi.c)
+module_add_library(gui_gtk datawindow.c destination.c gui_gtk_statusbar.c gui_gtk_action.c gui_gtk_window.c gui_gtk_poi.c gui_gtk_coordest.c)
 
Index: navit/gui/gtk/Makefile.am
===================================================================
--- navit/gui/gtk/Makefile.am	(revision 5904)
+++ navit/gui/gtk/Makefile.am	(working copy)
@@ -1,6 +1,6 @@
 include $(top_srcdir)/Makefile.inc
 AM_CPPFLAGS = -I$(top_srcdir)/navit @NAVIT_CFLAGS@ @HILDON_CFLAGS@ @GTK2_CFLAGS@ -DMODULE=gui_gtk
 modulegui_LTLIBRARIES = libgui_gtk.la
-libgui_gtk_la_SOURCES = datawindow.c destination.c gui_gtk_statusbar.c gui_gtk_action.c gui_gtk_window.c gui_gtk_poi.c gui_gtk.h gui_gtk_poi.h
+libgui_gtk_la_SOURCES = datawindow.c destination.c gui_gtk_statusbar.c gui_gtk_action.c gui_gtk_window.c gui_gtk_poi.c gui_gtk.h gui_gtk_poi.h gui_gtk_coordest.h
 libgui_gtk_la_LIBADD = @GTK2_LIBS@
 libgui_gtk_la_LDFLAGS = -module -avoid-version
Index: navit/gui/gtk/gui_gtk_action.c
===================================================================
--- navit/gui/gtk/gui_gtk_action.c	(revision 5904)
+++ navit/gui/gtk/gui_gtk_action.c	(working copy)
@@ -21,6 +21,7 @@
 #include <gtk/gtk.h>
 #include "navit.h"
 #include "gui_gtk.h"
+#include "gui_gtk_coordest.h"
 #ifdef __APPLE__
 #include "navit/menu.h"
 #else
@@ -176,6 +177,13 @@
 
 
 static void
+destinationcoord_action(GtkWidget *w, struct gui_priv *gui, void *dummy)
+{
+       gtk_gui_coordest(gui->nav);
+}
+
+
+static void
 route_clear_action(GtkWidget *w, struct gui_priv *gui, void *dummy)
 {
 	navit_set_destination(gui->nav, NULL, NULL, 0);
@@ -222,6 +230,7 @@
 	{ "DestinationAction", "flag_icon", _n("Set _destination"), "<control>D", _n("Opens address search dialog"), G_CALLBACK(destination_action) },
 	{ "POIAction", "flag_icon", _n("_POI search"), "<control>P", _n("Opens POI search dialog"), G_CALLBACK(poi_search_action) },
 	{ "RouteClearAction", NULL, _n("_Stop Navigation"), "<control>S", NULL, G_CALLBACK(route_clear_action) },
+        { "DestinationCoordAction", "flag_icon", _n("Set _coordinates"), "<control>C", _n("Opens coordinates search dialog"), G_CALLBACK(destinationcoord_action) },
 	{ "Test", NULL, _n("Test"), NULL, NULL, G_CALLBACK(destination_action) },
 	{ "QuitAction", GTK_STOCK_QUIT, _n("_Quit"), "<control>Q",_n("Quit the application"), G_CALLBACK (quit_action) }
 };
@@ -430,6 +439,7 @@
 				<toolitem name=\"Destination\" action=\"DestinationAction\"/>\
 				<toolitem name=\"POI\" action=\"POIAction\"/>\
 				<!-- <toolitem name=\"Info\" action=\"InfoAction\"/> -->\
+                                <toolitem name=\"DestinationCoord\" action=\"DestinationCoordAction\"/>\
 				<toolitem name=\"Roadbook\" action=\"RoadbookAction\"/>\
 				<toolitem name=\"Autozoom\" action=\"AutozoomAction\"/>\
 				<toolitem name=\"Quit\" action=\"QuitAction\"/>\
Index: navit/gui/gtk/gui_gtk_coordest.c
===================================================================
--- navit/gui/gtk/gui_gtk_coordest.c	(revision 0)
+++ navit/gui/gtk/gui_gtk_coordest.c	(working copy)
@@ -0,0 +1,177 @@
+/**
+ * Navit, a modular navigation system.
+ * Copyright (C) 2005-2013 Navit Team
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * version 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the
+ * Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
+ * Boston, MA  02110-1301, USA.
+ */
+
+#include <stdlib.h>
+#include <gtk/gtk.h>
+#include "gui_gtk_coordest.h" 
+#include "debug.h"
+#include "popup.h"
+#include "navit_nls.h"
+#include "coord.h"
+#include "callback.h"
+#include "navit.h"
+#include "transform.h"
+
+static struct gtk_coord_dest{
+       GtkWidget *entry_lat, *entry_lng;
+       GtkWidget *visor;
+       GtkWidget *button_visit, *button_destination, *button_map;    
+       struct navit *nav;
+       struct coord_geo geodest;
+} gtk_coord_dest;
+
+
+/*Returns float with the GTK_ENTRY text. If text finish in ", then converts from sexagesimal to decimal*/
+static navit_float
+get_decimal(GtkWidget *widget){
+       const char *text;
+       text=gtk_entry_get_text(GTK_ENTRY(widget));
+       if (g_str_has_suffix(text,"\"")){
+               float grades=0.0f;
+               float minutes=0.0f;
+               float seconds=0.0f;
+               sscanf(text,"%fยบ%f'%f\"",&grades, &minutes, &seconds);
+               if (abs(grades)>=90.0 || abs(minutes)>=60.0 || abs(seconds)>=60.0) return 0.0;
+               if (grades>0){
+                       return grades+minutes/60+seconds/3600;
+               } else {
+                       return grades-minutes/60-seconds/3600;
+               }
+       } else{
+               float decimal;
+               decimal=atof(text);
+               if (abs(decimal)>=90.0) return 0.0;
+               return decimal;
+       }
+}
+
+
+/*Code executed when entry_lat or entry_lng changes text*/
+static void
+entries_changed(GtkWidget *widget, struct gtk_coord_dest *search){
+       char buffer[100];
+       gtk_widget_set_sensitive(search->button_visit,TRUE);
+       gtk_widget_set_sensitive(search->button_map,TRUE);
+       gtk_widget_set_sensitive(search->button_destination,TRUE);
+       search->geodest.lat=get_decimal(search->entry_lat);
+       search->geodest.lng=get_decimal(search->entry_lng);
+       sprintf(buffer,_("Selected coordinates: %f, %f"), search->geodest.lat, search->geodest.lng);
+       gtk_label_set_text(GTK_LABEL(search->visor),buffer);
+}
+
+/*Coverts coord_geo to pcoord*/
+static struct pcoord 
+coordgeo_to_pcoord(struct coord_geo coordgeo){
+       struct pcoord pc;
+       struct coord c;
+       transform_from_geo(1,&coordgeo,&c);
+       pc.x=c.x;
+       pc.y=c.y;
+       pc.pro=1;
+       return pc;
+}
+
+/*Function when button destination is clicked. It sets the selected coord position as destination*/
+static void 
+button_destination_clicked(GtkWidget *widget, struct gtk_coord_dest *search)
+{
+       struct pcoord pc;
+       char buffer[100];
+       pc=coordgeo_to_pcoord(search->geodest);
+       sprintf(buffer,_("Coord: %f %f"), search->geodest.lat, search->geodest.lng);
+       navit_set_destination(search->nav, &pc, buffer,1);
+       dbg(1,_("Set destination to %f, %f \n"),search->geodest.lat,search->geodest.lng);
+}
+
+/*Function when button map is clicked. It shows the coord position in the map*/
+static void 
+button_map_clicked(GtkWidget *widget, struct gtk_coord_dest *search)
+{
+       struct pcoord pc;
+       pc=coordgeo_to_pcoord(search->geodest);
+       navit_set_center(search->nav, &pc,1);
+       dbg(1,_("Set map to %f, %f \n"),search->geodest.lat,search->geodest.lng);
+}
+
+/*Function when button visitbefore is clicked. It sets the first visit before of the waypoint when it's clicked*/
+static void 
+button_visit_clicked(GtkWidget *widget, struct gtk_coord_dest *search)
+{
+       struct pcoord pc;
+       pc=coordgeo_to_pcoord(search->geodest);
+       popup_set_visitbefore(search->nav, &pc,0);
+       dbg(1,_("Set next visit to %f, %f \n"),search->geodest.lat,search->geodest.lng);
+}
+
+/*Create UI and connects objects to functions*/
+void gtk_gui_coordest(struct navit *nav)
+{
+       GtkWidget *window,*vbox, *keyboard, *table;
+       GtkWidget *label, *description;
+
+       struct gtk_coord_dest *search=&gtk_coord_dest;
+       search->nav=nav;
+
+       window = gtk_window_new(GTK_WINDOW_TOPLEVEL);
+       gtk_window_set_title(GTK_WINDOW(window),_("Set destination from coordinate"));
+       gtk_window_set_wmclass (GTK_WINDOW (window), "navit", "Navit");
+       gtk_window_set_default_size (GTK_WINDOW (window),200,200);
+       vbox = gtk_vbox_new(FALSE, 0);
+       table = gtk_table_new(3, 7, FALSE);
+
+       description = gtk_label_new(_("Formats you can use in each field: \n\
+   - Decimal coordinates. Example: 40.173115     -2.166667 \n\
+   - Sexagesimal coordinates. Example: 40ยบ10'23.21\"     -2ยบ10'0\""));
+       label = gtk_label_new(_("Enter the latitude and the longitude"));
+       search->visor = gtk_label_new("");
+       search->entry_lat=gtk_entry_new_with_max_length(20);
+       search->entry_lng=gtk_entry_new_with_max_length(20);
+       gtk_entry_set_text(GTK_ENTRY(search->entry_lat),"0");
+       gtk_entry_set_text(GTK_ENTRY(search->entry_lng),"0");
+
+       search->button_visit = gtk_button_new_with_label(_("Visit Before"));
+       search->button_destination = gtk_button_new_with_label(_("Destination"));
+       search->button_map = gtk_button_new_with_label(_("Map"));
+
+       gtk_table_attach(GTK_TABLE(table), description, 0, 3, 0, 1,  0, GTK_FILL|GTK_EXPAND, GTK_FILL|GTK_EXPAND,  0);
+       gtk_table_attach(GTK_TABLE(table), label,      0, 1, 2, 3,  0, GTK_FILL, 0, 0);
+       gtk_table_attach(GTK_TABLE(table), search->entry_lat,     1, 2, 2, 3,  0, GTK_FILL, 0, 0);
+       gtk_table_attach(GTK_TABLE(table), search->entry_lng,     2, 3, 2, 3,  0, GTK_FILL, 0, 0);
+       gtk_table_attach(GTK_TABLE(table), search->visor,      0, 3, 4, 5,  0, GTK_FILL|GTK_EXPAND, GTK_FILL|GTK_EXPAND, 0);
+       gtk_table_attach(GTK_TABLE(table), search->button_map,         0, 1, 6, 7,  GTK_FILL, GTK_FILL, 0, 0);
+       gtk_table_attach(GTK_TABLE(table), search->button_visit,       1, 2, 6, 7,  GTK_FILL, GTK_FILL, 0, 0);
+       gtk_table_attach(GTK_TABLE(table), search->button_destination, 2, 3, 6, 7,  GTK_FILL, GTK_FILL, 0, 0);
+       gtk_box_pack_start(GTK_BOX(vbox), table, TRUE, TRUE, 0);
+
+       g_signal_connect(G_OBJECT(search->entry_lat), "changed", G_CALLBACK(entries_changed), search);
+       g_signal_connect(G_OBJECT(search->entry_lng), "changed", G_CALLBACK(entries_changed), search);
+       g_signal_connect(G_OBJECT(search->button_visit), "clicked", G_CALLBACK(button_visit_clicked), search);
+       g_signal_connect(G_OBJECT(search->button_map), "clicked", G_CALLBACK(button_map_clicked), search);
+       g_signal_connect(G_OBJECT(search->button_destination), "clicked", G_CALLBACK(button_destination_clicked), search);
+
+       gtk_widget_set_sensitive(search->button_visit,FALSE);
+       gtk_widget_set_sensitive(search->button_map,FALSE);
+       gtk_widget_set_sensitive(search->button_destination,FALSE);
+
+       keyboard=gtk_socket_new();
+       gtk_box_pack_end(GTK_BOX(vbox), keyboard, FALSE, FALSE, 0);
+       gtk_container_add(GTK_CONTAINER(window), vbox);
+       gtk_widget_show_all(window);
+}
+
Index: navit/gui/gtk/gui_gtk_coordest.h
===================================================================
--- navit/gui/gtk/gui_gtk_coordest.h	(revision 0)
+++ navit/gui/gtk/gui_gtk_coordest.h	(working copy)
@@ -0,0 +1,26 @@
+/**
+ * Navit, a modular navigation system.
+ * Copyright (C) 2005-2013 Navit Team
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Library General Public License
+ * version 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Library General Public License for more details.
+ *
+ * You should have received a copy of the GNU Library General Public
+ * License along with this program; if not, write to the
+ * Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
+ * Boston, MA  02110-1301, USA.
+ */
+
+#ifndef NAVIT_GTK_COORDEST_H
+#define NAVIT_GTK_COORDEST_H
+
+struct navit;
+void gtk_gui_coordest(struct navit *nav);
+
+#endif
