#!/usr/bin/python
# -*- coding: utf-8 -*-  

# No se permiten comillas dobles en la inserción a base de datos
import os, sys, glob, datetime, string, adodb, shutil

def hayregistros():
	s = "SELECT count(*) as count FROM peliculas WHERE id_cds= " + str(id)
	curs=con.Execute(s)
        r = curs.GetRowAssoc(0)  
	if int(r['count'])>0:
		curs.Close()
		return True
	else:
		curs.Close()
		return False

def borrar_registros():
	s = "SELECT foto, foto100 FROM peliculas WHERE id_cds= " + str(id) + ";"
        cur=con.Execute(s)
        while not cur.EOF:
            	row = cur.GetRowAssoc(0)   
		sqllo0="select lo_unlink("+str(row['foto'])+");"
#		print sqllo0
	        con.Execute(sqllo0)
                sqllo1="select lo_unlink("+str(row['foto100'])+");"
                con.Execute(sqllo1)
		cur.MoveNext()
	cur.Close()
        sqldel="delete from peliculas where id_cds=" + str(id) + ";"
        con.Execute(sqldel)

def string2shell(cadena):
    cadena=string.replace(cadena,"'","\\'")
    return cadena
        
        
def Yn(pregunta):
	ok = False
	while True:
	     	user_input = raw_input(pregunta +" [Y|n]").strip().lower()
		if not user_input or user_input == 'y':
        		return True
	     	elif user_input == 'n':
        	 	return False
	     	else:
        	 	print "Please enter 'Y', 'n'"

def string2tex(cadena):
	cadena=string.replace(cadena,'[','$ [ $')
	cadena=string.replace(cadena,']','$ ] $')
	cadena=string.replace(cadena,'&','\&')
	cadena=string.replace(cadena,'²','$ ^2 $')
	return cadena


### MAIN SCRIPT ###
cwd=os.getcwd().split("/")
os.mkdir("/tmp/pdffilms")
os.system("chmod 777 /tmp/pdffilms")


dsn = "dbname=programas host=localhost port=5432 user=postgres password=***"
con = adodb.NewADOConnection("postgres")
con.Connect("127.0.0.1","postgres","*","programas")


if "-i" in sys.argv:# insertar			    
    try:
	    id=int(cwd[len(cwd)-1])
    except:
	    print "El directorio actual no es un directorio numérico"
	    sys.exit(100)

    if Yn("El identificador del dispositivo a introducir es '" +str(id) + "'. ¿Desea continuar?")==False:
	    sys.exit(100)


    print "+ Comprobando que el nombre de los videos y las imágenes tienen el formato correcto"
    for file in glob.glob( os.getcwd()+ "/*.jpg" ):
	    if os.path.exists(file[:-3]+"avi") ==False:
		    print "No existe " +  file[:-3]+"avi"
		    sys.exit(100)
	    else:
		    continue
	    if os.path.exists(file[:-3]+"mpg") ==False:
		    print "No existe " +  file[:-3]+"mpg" 
	    else:
		    continue
		    sys.exit(100)



    # "Chequeando si hay registros en la base de datos del dispositivo " + str(id)
    if hayregistros()==True:
	if Yn("+ ¿Desea borrar los registros del dispositivo '" +str(id) + "'?")==False:
		    sys.exit(100)
	else:
	    print "   - Borrando los registros..."
	    borrar_registros()

    print "+ Insertando las peliculas en la base de datos"
    for file in glob.glob( os.getcwd()+ "/*.jpg" ):
	comando="convert -resize 100 \"" +file + "\" \"/tmp/pdffilms/" + os.path.basename(file) + ".100.jpg\""
	os.system(comando)
	os.system("chmod 777 "  + "\"/tmp/pdffilms/" + os.path.basename(file) + ".100.jpg\"")
	sqlins="insert into peliculas (foto, foto100, id_peliculas, fechagrabacion, titulo, lu_formatos, id_cds, sonidook, imagenok, cds, comentario, funciona, lu_situaciones) values (lo_import('" + string2shell(file) + "'),lo_import('/tmp/pdffilms/" + string2shell(os.path.basename(file)) + ".100.jpg'),(select max(id_peliculas)+1 from peliculas), '" + str(datetime.date.today())+ "', '" + string2shell(file[len(os.getcwd())+1:-4]) + "',1, " + str(id) + ", true, true,1, '', True, 1);"
    #	print sqlins
	print "   - " + file[len(os.getcwd())+1:-4]
	con.Execute(sqlins)

    os.system("rm  /tmp/pdffilms/*.100.jpg")

elif "-g" in sys.argv:
    # SACA LAS IMÁGENES DE LA BASE DE DATOS
    s = "SELECT foto FROM peliculas;"
    cur=con.Execute(s)
    while not cur.EOF:
	    row = cur.GetRowAssoc(0)
	    sql="select lo_export("+str(row['foto'])+ ", '/tmp/pdffilms/"+ str(row['foto'])+ ".jpg');"
	    con.Execute(sql)
	    cur.MoveNext()
    cur.Close()
    
    print ("  - Sacando las imágenes")

    header=""
    header = header + "\\documentclass[12pt,a4paper]{article}\n"
    header = header + "\\usepackage{pdflscape}\n"
    header = header + "\\usepackage[utf8]{inputenc}\n"
    header = header + "\\usepackage[spanish]{babel}\n"
    header = header + "\\usepackage[T1]{fontenc}\n"
    header = header + "\\usepackage{geometry}\n"
    header = header + "\\usepackage{setspace}\n"
    header = header + "\\usepackage{graphicx}\n"
    header = header + "\\usepackage{ae,aecompl}\n"
    header = header + "\\usepackage[ bookmarksnumbered, colorlinks=true, linkcolor=blue, pdftitle={Listado de películas}, pdfauthor={Pelvis}, pdfkeywords={eric5}]{hyperref}\n"
    header = header + "\\geometry{verbose,a4paper}\n"
    header = header + "\\usepackage{anysize}\n"
    header = header + "\\marginsize{1.8cm}{1.3cm}{1.5cm}{1.5cm} \n"

    header = header + "\\begin{document}\n"


    bd=""
    bd=bd + "\\begin{center}\n"
    bd=bd + "\\section*{Listado de películas}\n\n"
    bd=bd + "\\addcontentsline{toc}{section}{Listado de películas}\n"
    bd=bd + "Esta versión es del día " + str(datetime.date.today()) + "\n"
    bd=bd + "\\end{center}\n"
    bd=bd +"\\tableofcontents{ }\n"
    bd=bd +"\\newpage\n"


    # LISTADO DE DVD POR PAGINA
    bd = bd + "\section{DVD en grande}\n"
    s = "SELECT distinct (id_cds) as id_cds FROM peliculas ORDER BY id_cds desc;"

    cur=con.Execute(s)
    while not cur.EOF:
	    row = cur.GetRowAssoc(0)
	    # Son necesarias las dos
	    bd=bd + "\\subsection*{DVD: "+str(row['id_cds'])+"}\n" 
	    bd=bd + "\\addcontentsline{toc}{subsection}{DVD: "+str(row['id_cds'])+"}\n" 
	    bd=bd + "\\begin{tabular}{p{8cm} p{8cm}}\n"
	    f1=f2=f3=f4=f5=f6=""
	    t1=t2=t3=t4=t5=t6=""
	    sb = "SELECT titulo, foto FROM peliculas where id_cds="+ str(row['id_cds']) +";"
	    curb=con.Execute(sb)
	    #f1 y t1
	    if not curb.EOF:
		    rowb = curb.GetRowAssoc(0)
		    f1= "\\includegraphics[width=7.7cm,height=7.2cm]{"+ str(rowb['foto'])+ ".jpg}"
		    t1=  string2tex(str(rowb['titulo'])) 
		    curb.MoveNext()
	    #f2 y t2
	    if not curb.EOF:
		    rowb = curb.GetRowAssoc(0)
		    f2= "\\includegraphics[width=7.7cm,height=7.2cm]{"+ str(rowb['foto'])+ ".jpg}"
		    t2=  string2tex(str(rowb['titulo']))
		    curb.MoveNext()
	    #f3 y t3
	    if not curb.EOF:
		    rowb = curb.GetRowAssoc(0)
		    f3= "\\includegraphics[width=7.7cm,height=7.2cm]{"+ str(rowb['foto'])+ ".jpg}"
		    t3=  string2tex(str(rowb['titulo']))
		    curb.MoveNext()
	    #f4 y t4
	    if not curb.EOF:
		    rowb = curb.GetRowAssoc(0)
		    f4= "\\includegraphics[width=7.7cm,height=7.2cm]{"+ str(rowb['foto'])+ ".jpg}"
		    t4=  string2tex(str(rowb['titulo']))
		    curb.MoveNext()
	    #f5 y t5
	    if not curb.EOF:
		    rowb = curb.GetRowAssoc(0)
		    f5= "\\includegraphics[width=7.7cm,height=7.2cm]{"+ str(rowb['foto'])+ ".jpg}"
		    t5=  string2tex(str(rowb['titulo']))
		    curb.MoveNext()
	    #f6 y t6
	    if not curb.EOF:
		    rowb = curb.GetRowAssoc(0)
		    f6= "\\includegraphics[width=7.7cm,height=7.2cm]{"+ str(rowb['foto'])+ ".jpg}"
		    t6=  string2tex(str(rowb['titulo']))
		    curb.MoveNext()
	    curb.Close()

	    bd=bd + f1 + "&" + f2 + "\\\\\n"
	    bd=bd + t1 + "&" + t2 + "\\\\\n"
	    bd=bd + f3 + "&" + f4 + "\\\\\n"
	    bd=bd + t3 + "&" + t4 + "\\\\\n"
	    bd=bd + f5 + "&" + f6 + "\\\\\n"
	    bd=bd + t5 + "&" + t6 + "\\\\\n"

	    bd = bd + "\\end{tabular}\n"
	    bd=bd +"\\newpage\n\n"
	    cur.MoveNext()
    cur.Close()


    print ("  - Listado por página realizado")



    # LISTADO DE CARATULAS JUNTAS

    bd=bd + "\section{DVD en pequeño}\n"
    s = "SELECT distinct (id_cds) as id_cds FROM peliculas ORDER BY id_cds desc;"
    cur=con.Execute(s)
    while not cur.EOF:
	    row = cur.GetRowAssoc(0)
	    bd=bd + "\\begin{tabular}{c c c c c c c}\n"
	    bd=bd + "DVD " +str(row['id_cds']) + " & "
	    sb = "SELECT titulo, foto FROM peliculas where id_cds="+ str(row['id_cds']) +";"
	    curb=con.Execute(sb)
	    while not curb.EOF:
		    rowb = curb.GetRowAssoc(0)
		    bd=bd + "\includegraphics[width=2cm,height=2cm]{"+ str(rowb['foto'])+ ".jpg} & "
		    curb.MoveNext()
	    curb.Close()
	    bd = bd[:-2]  + "\\\\\n"
	    bd = bd + "\\end{tabular}\n\n"
	    if row['id_cds']%10==0:
		    bd=bd +"\\newpage\n\n"

	    cur.MoveNext()
    cur.Close()


    bd=bd +"\\newpage\n"



    print ("  - Listado de carátulas juntas")

    # ORDENADAS ALFABETICAMENTE

    bd=bd + "\section{Ordenadas alfabéticamente}\n"
    s = "SELECT titulo, foto  FROM peliculas ORDER BY titulo;"
    cur=con.Execute(s)
    i=0
    while not cur.EOF:
	    i=i+1
	    row = cur.GetRowAssoc(0)
	    bd=bd + "\\begin{tabular}{c c}\n"
	    bd=bd + "\\includegraphics[width=0.75cm,height=0.75cm]{"+ str(row['foto'])+ ".jpg} & " + string2tex(row['titulo']) + " \\\\\n"
	    bd = bd + "\\end{tabular}\n\n"
	    if i%25==0:
		    bd=bd +"\\newpage\n\n"
	    cur.MoveNext()
    cur.Close()


    print ("  - Listado ordenado alfabéticamente")

    footer=" \
    \end{document} \
    "

    doc = header + bd + footer

    d=open("/tmp/pdffilms/peliculas.tex","w")
    d.write(doc)
    d.close()

    os.system("cd /tmp/pdffilms;pdflatex /tmp/pdffilms/peliculas.tex;  &>/dev/null;pdflatex /tmp/pdffilms/peliculas.tex")
    os.system("cp /tmp/pdffilms/peliculas.pdf ~/peliculas.pdf")

  
else:
	print ("Programa que genera un pdf de una base de datos postgresql con películas")
	print ("   # pdffilms -i		Inserta una película en la base de datos")
        print ("   # pdffilms -g                Genera el pdf con las películas")

con.Close()
shutil.rmtree("/tmp/pdffilms")