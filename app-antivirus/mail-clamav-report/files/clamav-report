#!/usr/bin/python3
import smtplib, sys, configparser, os, datetime, getpass, subprocess
from optparse import OptionParser
import base64

version="0.3"

def clamdscan(f):
    cmd = "cat '{}'| clamdscan -".format(f)
    ps = subprocess.Popen(cmd,shell=True,stdout=subprocess.PIPE,stderr=subprocess.STDOUT)
    for line in  b2s(ps.communicate()[0]).split("\n"):
        if line.find("stream: OK")==-1:
            return line.replace("stream", f )
    return ""


def b2s(b, code='UTF-8'):
    return bytes(b).decode(code)

def s2b(s, code='UTF-8'):
    if s==None:
        return "".encode(code)
    else:
        return s.encode(code)


class ConfigFile:
    def __init__(self,filename):
        self.filename=filename
        self.config=configparser.ConfigParser()
        self.server="smtp.gmail.com"
        self.user="user"
        self.to="address.domain.com"
        self.password=""
        self.load()

    def save(self):
        try:
            os.makedirs(os.path.dirname(self.filename), int("0700",8))
        except:
            pass
        if self.config.has_section("user")==False:
            self.config.add_section("user")
        if self.config.has_section("smtp")==False:
            self.config.add_section("smtp")
        self.config.set("user",  'to', self.to)
        self.config.set("smtp",  'smtpserver', self.server)
        self.config.set("smtp",  'user', self.user)
        self.config.set("smtp",  'pass', b2s(base64.b64encode(s2b(self.password))))
        with open(self.filename, 'w') as configfile:
            self.config.write(configfile)
        os.chmod(self.filename,int("0600",8))


    def load(self):
        self.config.read(self.filename)
        try:
            self.server=self.config.get("smtp","smtpserver" )
            self.user=self.config.get("smtp","user")
            self.to=self.config.get("user","to")
            self.password=b2s(base64.b64decode(self.config.get("smtp","pass")))
        except:
            print ("Error con el fichero de configuraci√≥n /etc/mail-clamav-report/mail-clamav-report.cfg")    

    def query(self):
        print("Generating configuration file...")
        self.server=input("Enter SMTP server: ")
        self.user=input("Enter SMTP user: ")
        self.password=getpass.getpass("Enter SMTP password: ")
        self.to=input("Enter address to send mail: ")
        self.save()

inicio=datetime.datetime.now()

config=ConfigFile('/etc/mail-clamav-report/mail-clamav-report.cfg')

#Parse options
parser = OptionParser(version=version,  description="Antivirus scans whole system and sends an email")
parser.add_option( "--config", action="store_true", default=False, dest="config", help="Set configuration")
parser.add_option("--progress", action="store_true", default=False, dest="progress", help="Show progress")
(options, args) = parser.parse_args()

if options.config==True or os.path.exists(config.filename)==False:
    config.query()
    sys.exit(1)


name=os.popen("hostname").read()
f=os.popen("hostname -d")
name=name[:-1]+"."+f.read()[:-1]
f.close()

allfiles=[]
report=""
for root, dirs, files in os.walk("/home/trabajo/Proyectos/xulpymoney"):
    for nam in files:
        allfiles.append(os.path.join(root,nam))

inicioav=datetime.datetime.now()

found=0
for i, file in enumerate(allfiles):
    if options.progress:
        if i!=0:
            stri="Files {} of {}. Found {}. ETA: {}".format(i+1, len(allfiles), found, (len(allfiles)-i)*(datetime.datetime.now()-inicioav)/i) 
        else:
            stri="Files {} of {}. Found {}.".format(i+1, len(allfiles), found) 
        sys.stdout.write("\b"*(len(stri)+11)+stri)
        sys.stdout.flush()
    output=clamdscan(file)
    if output!="":
        found=found+1
        report=report +output
print()

message = """From: Mail-clamav-report
To: """ + config.to + """
Content-Type: text/plain; charset=UTF-8
Subject: Mail-clamav-report from """ + name + """

Found {} virus of {} files:
""".format(found,len(allfiles)) + report + """
------------------------
""" + name + """: el proceso ha durado: """ + str(datetime.datetime.now()-inicio)

try:
    server = smtplib.SMTP(config.server)
#    server.set_debuglevel(1)
    server.ehlo()
    server.starttls()
    server.ehlo()
    server.login(config.user,config.password)
except:
    print ("Error: unable to send email")

server.sendmail("mail-clamav-report", config.to, message.encode('UTF-8'))
server.quit()

print (report)
