#!/usr/bin/python3
import argparse
from datetime import datetime
from psutil import swap_memory, process_iter
from time import sleep

parser=argparse.ArgumentParser()
group1=parser.add_mutually_exclusive_group(required=True)
group1.add_argument('--analyze', help='XULPYMONEY code', action='store_true', default=False)
group1.add_argument('--get', help='XULPYMONEY code', action='store_true',default=False)
args=parser.parse_args()


class SetPackages:
    """
       Group of SetPackages
    """
    def __init__(self):
        self.arr=[]
        self.read_file()

    def read_file(self):
        f=open("/var/lib/swapping_ebuilds.txt","r")
        last=None
        reports=[]
        for line in f.readlines():
            rep=Report().init__from_line(line)
            if rep!=None:
                reports.append(rep)

        last_report=reports[0]
        package=Package()
        for r in reports:
            if last_report.name==r.name:
                 package.arr.append(r)
            else:
                 self.arr.append(package)
                 package=Package()
            last_report=r

    def print(self):
        for p in self.arr:
            print ("{} ({}) [{}] has {} reports ({} per hour) with {} of swap average".format(p.datetime(), p.duration(),p.name(),p.num_reports(), int(p.reports_per_hour()),int(p.average_swap())))


class Package:
    """
       Group of Reports
    """
    def __init__(self):
        self.arr=[]

    def average_swap(self):
        sum=0
        for r in self.arr:
            sum=sum+r.swap
        return sum/self.num_reports()

    def num_reports(self):
        return len(self.arr)

    def duration(self):
        return self.arr[len(self.arr)-1].datetime-self.arr[0].datetime

    def datetime(self):
        """
           Returns datetime of the first Result
        """
        return self.arr[0].datetime
    def name(self):
        return self.arr[0].name
    def reports_per_hour(self):
        return self.num_reports()/self.duration().total_seconds()*60*60

class Report:
    def __init__(self):
        self.datetime=None
        self.name=None
        self.swap=0

    def init__from_line(self,line):
        try:
            line=line[:-1]
            str_datetime=line.split(" [")[0]
            self.datetime=datetime.strptime(str_datetime, "%Y-%m-%d %H:%M:%S.%f")
            self.name=line.split(" [")[1].split("] ")[0]
            self.swap=int(line.split(" [")[1].split("] ")[1])
            return self
        except:
            print("Problem parsing: {}".format(line))
            return None

    def __repr__(self):
        return "{} {} {}".format(self.datetime,self.name,self.swap)
if args.get:
    while True:
        package=""
        try:
            for proc in process_iter():
                for word in proc.cmdline():
                    if word.endswith("] sandbox"):
                        package=word.replace(" sandbox","")
        except:
            pass

        used=swap_memory().used

        s="{} {} {}".format(datetime.now(), package, used)

        if used>500*1024*1024:
            f=open("/var/lib/swapping_ebuilds.txt","a")
            f.write(s+"\n")
            f.close()
            print (s, "Logging...")
        else:
            print (s)
        sleep(60)

if args.analyze:
    set=SetPackages()
    set.print()